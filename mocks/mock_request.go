// Code generated by MockGen. DO NOT EDIT.
// Source: request.go

// Package mock_gox_app is a generated GoMock package.
package mock_gox_app

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRequest is a mock of Request interface.
type MockRequest struct {
	ctrl     *gomock.Controller
	recorder *MockRequestMockRecorder
}

// MockRequestMockRecorder is the mock recorder for MockRequest.
type MockRequestMockRecorder struct {
	mock *MockRequest
}

// NewMockRequest creates a new mock instance.
func NewMockRequest(ctrl *gomock.Controller) *MockRequest {
	mock := &MockRequest{ctrl: ctrl}
	mock.recorder = &MockRequestMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRequest) EXPECT() *MockRequestMockRecorder {
	return m.recorder
}

// GetHeaders mocks base method.
func (m *MockRequest) GetHeaders(name string) ([]string, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHeaders", name)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetHeaders indicates an expected call of GetHeaders.
func (mr *MockRequestMockRecorder) GetHeaders(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHeaders", reflect.TypeOf((*MockRequest)(nil).GetHeaders), name)
}

// GetMetricName mocks base method.
func (m *MockRequest) GetMetricName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMetricName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetMetricName indicates an expected call of GetMetricName.
func (mr *MockRequestMockRecorder) GetMetricName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetricName", reflect.TypeOf((*MockRequest)(nil).GetMetricName))
}

// GetParsedRequestBody mocks base method.
func (m *MockRequest) GetParsedRequestBody() interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetParsedRequestBody")
	ret0, _ := ret[0].(interface{})
	return ret0
}

// GetParsedRequestBody indicates an expected call of GetParsedRequestBody.
func (mr *MockRequestMockRecorder) GetParsedRequestBody() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetParsedRequestBody", reflect.TypeOf((*MockRequest)(nil).GetParsedRequestBody))
}

// GetPathParam mocks base method.
func (m *MockRequest) GetPathParam(name string) (string, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPathParam", name)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetPathParam indicates an expected call of GetPathParam.
func (mr *MockRequestMockRecorder) GetPathParam(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPathParam", reflect.TypeOf((*MockRequest)(nil).GetPathParam), name)
}

// GetQuery mocks base method.
func (m *MockRequest) GetQuery(name string) ([]string, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQuery", name)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetQuery indicates an expected call of GetQuery.
func (mr *MockRequestMockRecorder) GetQuery(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQuery", reflect.TypeOf((*MockRequest)(nil).GetQuery), name)
}

// GetRequestBody mocks base method.
func (m *MockRequest) GetRequestBody() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRequestBody")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// GetRequestBody indicates an expected call of GetRequestBody.
func (mr *MockRequestMockRecorder) GetRequestBody() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRequestBody", reflect.TypeOf((*MockRequest)(nil).GetRequestBody))
}

// MockRequestContextExt is a mock of RequestContextExt interface.
type MockRequestContextExt struct {
	ctrl     *gomock.Controller
	recorder *MockRequestContextExtMockRecorder
}

// MockRequestContextExtMockRecorder is the mock recorder for MockRequestContextExt.
type MockRequestContextExtMockRecorder struct {
	mock *MockRequestContextExt
}

// NewMockRequestContextExt creates a new mock instance.
func NewMockRequestContextExt(ctrl *gomock.Controller) *MockRequestContextExt {
	mock := &MockRequestContextExt{ctrl: ctrl}
	mock.recorder = &MockRequestContextExtMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRequestContextExt) EXPECT() *MockRequestContextExtMockRecorder {
	return m.recorder
}

// GetHeaders mocks base method.
func (m *MockRequestContextExt) GetHeaders(name string) ([]string, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHeaders", name)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetHeaders indicates an expected call of GetHeaders.
func (mr *MockRequestContextExtMockRecorder) GetHeaders(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHeaders", reflect.TypeOf((*MockRequestContextExt)(nil).GetHeaders), name)
}

// GetMetricName mocks base method.
func (m *MockRequestContextExt) GetMetricName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMetricName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetMetricName indicates an expected call of GetMetricName.
func (mr *MockRequestContextExtMockRecorder) GetMetricName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetricName", reflect.TypeOf((*MockRequestContextExt)(nil).GetMetricName))
}

// GetOneHeaderAsBool mocks base method.
func (m *MockRequestContextExt) GetOneHeaderAsBool(name string) (int, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOneHeaderAsBool", name)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetOneHeaderAsBool indicates an expected call of GetOneHeaderAsBool.
func (mr *MockRequestContextExtMockRecorder) GetOneHeaderAsBool(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOneHeaderAsBool", reflect.TypeOf((*MockRequestContextExt)(nil).GetOneHeaderAsBool), name)
}

// GetOneHeaderAsFloat mocks base method.
func (m *MockRequestContextExt) GetOneHeaderAsFloat(name string) (int, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOneHeaderAsFloat", name)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetOneHeaderAsFloat indicates an expected call of GetOneHeaderAsFloat.
func (mr *MockRequestContextExtMockRecorder) GetOneHeaderAsFloat(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOneHeaderAsFloat", reflect.TypeOf((*MockRequestContextExt)(nil).GetOneHeaderAsFloat), name)
}

// GetOneHeaderAsInt mocks base method.
func (m *MockRequestContextExt) GetOneHeaderAsInt(name string) (int, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOneHeaderAsInt", name)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetOneHeaderAsInt indicates an expected call of GetOneHeaderAsInt.
func (mr *MockRequestContextExtMockRecorder) GetOneHeaderAsInt(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOneHeaderAsInt", reflect.TypeOf((*MockRequestContextExt)(nil).GetOneHeaderAsInt), name)
}

// GetOneHeaderAsString mocks base method.
func (m *MockRequestContextExt) GetOneHeaderAsString(name string) (int, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOneHeaderAsString", name)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetOneHeaderAsString indicates an expected call of GetOneHeaderAsString.
func (mr *MockRequestContextExtMockRecorder) GetOneHeaderAsString(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOneHeaderAsString", reflect.TypeOf((*MockRequestContextExt)(nil).GetOneHeaderAsString), name)
}

// GetOneQueryAsBool mocks base method.
func (m *MockRequestContextExt) GetOneQueryAsBool(name string) (int, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOneQueryAsBool", name)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetOneQueryAsBool indicates an expected call of GetOneQueryAsBool.
func (mr *MockRequestContextExtMockRecorder) GetOneQueryAsBool(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOneQueryAsBool", reflect.TypeOf((*MockRequestContextExt)(nil).GetOneQueryAsBool), name)
}

// GetOneQueryAsFloat mocks base method.
func (m *MockRequestContextExt) GetOneQueryAsFloat(name string) (int, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOneQueryAsFloat", name)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetOneQueryAsFloat indicates an expected call of GetOneQueryAsFloat.
func (mr *MockRequestContextExtMockRecorder) GetOneQueryAsFloat(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOneQueryAsFloat", reflect.TypeOf((*MockRequestContextExt)(nil).GetOneQueryAsFloat), name)
}

// GetOneQueryAsInt mocks base method.
func (m *MockRequestContextExt) GetOneQueryAsInt(name string) (int, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOneQueryAsInt", name)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetOneQueryAsInt indicates an expected call of GetOneQueryAsInt.
func (mr *MockRequestContextExtMockRecorder) GetOneQueryAsInt(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOneQueryAsInt", reflect.TypeOf((*MockRequestContextExt)(nil).GetOneQueryAsInt), name)
}

// GetOneQueryAsString mocks base method.
func (m *MockRequestContextExt) GetOneQueryAsString(name string) (int, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOneQueryAsString", name)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetOneQueryAsString indicates an expected call of GetOneQueryAsString.
func (mr *MockRequestContextExtMockRecorder) GetOneQueryAsString(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOneQueryAsString", reflect.TypeOf((*MockRequestContextExt)(nil).GetOneQueryAsString), name)
}

// GetParsedRequestBody mocks base method.
func (m *MockRequestContextExt) GetParsedRequestBody() interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetParsedRequestBody")
	ret0, _ := ret[0].(interface{})
	return ret0
}

// GetParsedRequestBody indicates an expected call of GetParsedRequestBody.
func (mr *MockRequestContextExtMockRecorder) GetParsedRequestBody() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetParsedRequestBody", reflect.TypeOf((*MockRequestContextExt)(nil).GetParsedRequestBody))
}

// GetPathParam mocks base method.
func (m *MockRequestContextExt) GetPathParam(name string) (string, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPathParam", name)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetPathParam indicates an expected call of GetPathParam.
func (mr *MockRequestContextExtMockRecorder) GetPathParam(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPathParam", reflect.TypeOf((*MockRequestContextExt)(nil).GetPathParam), name)
}

// GetPathParamAsBool mocks base method.
func (m *MockRequestContextExt) GetPathParamAsBool(name string) (bool, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPathParamAsBool", name)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetPathParamAsBool indicates an expected call of GetPathParamAsBool.
func (mr *MockRequestContextExtMockRecorder) GetPathParamAsBool(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPathParamAsBool", reflect.TypeOf((*MockRequestContextExt)(nil).GetPathParamAsBool), name)
}

// GetPathParamAsFloat mocks base method.
func (m *MockRequestContextExt) GetPathParamAsFloat(name string) (float32, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPathParamAsFloat", name)
	ret0, _ := ret[0].(float32)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetPathParamAsFloat indicates an expected call of GetPathParamAsFloat.
func (mr *MockRequestContextExtMockRecorder) GetPathParamAsFloat(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPathParamAsFloat", reflect.TypeOf((*MockRequestContextExt)(nil).GetPathParamAsFloat), name)
}

// GetPathParamAsInt mocks base method.
func (m *MockRequestContextExt) GetPathParamAsInt(name string) (int, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPathParamAsInt", name)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetPathParamAsInt indicates an expected call of GetPathParamAsInt.
func (mr *MockRequestContextExtMockRecorder) GetPathParamAsInt(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPathParamAsInt", reflect.TypeOf((*MockRequestContextExt)(nil).GetPathParamAsInt), name)
}

// GetPathParamAsString mocks base method.
func (m *MockRequestContextExt) GetPathParamAsString(name string) (string, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPathParamAsString", name)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetPathParamAsString indicates an expected call of GetPathParamAsString.
func (mr *MockRequestContextExtMockRecorder) GetPathParamAsString(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPathParamAsString", reflect.TypeOf((*MockRequestContextExt)(nil).GetPathParamAsString), name)
}

// GetQuery mocks base method.
func (m *MockRequestContextExt) GetQuery(name string) ([]string, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQuery", name)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetQuery indicates an expected call of GetQuery.
func (mr *MockRequestContextExtMockRecorder) GetQuery(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQuery", reflect.TypeOf((*MockRequestContextExt)(nil).GetQuery), name)
}

// GetRequestBody mocks base method.
func (m *MockRequestContextExt) GetRequestBody() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRequestBody")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// GetRequestBody indicates an expected call of GetRequestBody.
func (mr *MockRequestContextExtMockRecorder) GetRequestBody() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRequestBody", reflect.TypeOf((*MockRequestContextExt)(nil).GetRequestBody))
}
